<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Eclipse EGF
-->
<project name="project" default="all">
    <property environment="env" />

	<property name="relengDir" value="${basedir}"/>
	<tstamp>
		<format property="myTimestamp" pattern="yyyyMMdd-HHmm"/>
	</tstamp>

    <condition property="build.root" value="${env.WORKSPACE}">
        <isset property="env.WORKSPACE" />
    </condition>
    <condition property="tools" value="${env.tools}">
        <isset property="env.tools" />
    </condition>
    <condition property="result" value="${env.result}">
        <isset property="env.result" />
    </condition>
    <condition property="publish" value="${env.publish}">
        <isset property="env.publish" />
    </condition>
    <condition property="workspace" value="${env.ECLIPSE_WORKSPACE}">
        <isset property="env.ECLIPSE_WORKSPACE" />
    </condition>
    <condition property="timestamp" value="${env.BUILD_ID}">
        <isset property="env.BUILD_ID" />
    </condition>
    <condition property="site.pack200" value="${env.site.pack200}">
        <isset property="env.site.pack200" />
    </condition>
    <condition property="qualifier.replacement.*" value="${env.qualifier.replacement.*}">
        <isset property="env.qualifier.replacement.*" />
    </condition>
    <condition property="CapellaVersion" value="${env.CapellaVersion}">
        <isset property="env.CapellaVersion" />
    </condition>
    <condition property="hudsonJob" value="${env.hudsonJob}">
        <isset property="env.hudsonJob" />
    </condition>
    <condition property="site_Kitalpha" value="${env.site_Kitalpha}">
        <isset property="env.site_Kitalpha" />
    </condition>
    <condition property="site_EGF" value="${env.site_EGF}">
        <isset property="env.site_EGF" />
    </condition>
    <condition property="buildVersion" value="${env.buildVersion}">
        <isset property="env.buildVersion" />
    </condition>

    <property file="build.properties" />

    <!-- This macro executes the default application of an eclipse installation that resides
         in the folder ${buildtools}/@app
      -->
    <macrodef name="eclipse.launch">
        <attribute name="app" />
        <attribute name="workspace" default="${workspace}" />
        <element name="args" optional="true" />
        <sequential>
            <!-- We assume that the eclipse installation is beneath ${tools} -->
            <property name="@{app}.deploy.dir" value="${tools}/@{app}" />

            <!-- Find the Eclipse launcher and assing its location to the @{app}.launcher property -->
            <pathconvert property="@{app}.launcher">
                <first count="1">
                    <sort>
                        <fileset dir="${@{app}.deploy.dir}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
                        <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                            <date />
                        </reverse>
                    </sort>
                </first>
            </pathconvert>

			<!-- Copy Eclipse Variables preferences -->
			<copy file="${relengDir}/templates/org.eclipse.core.variables.prefs"
				toFile="@{workspace}/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.core.variables.prefs"/>

            <!-- Launch the eclipse application -->
            <java fork="true" jar="${@{app}.launcher}" dir="${@{app}.deploy.dir}" failonerror="true">
                    <jvmarg value="-Xmx1024m"/>
                    <jvmarg value="-XX:MaxPermSize=256m"/>

	                <jvmarg value="-DrelengDir=relengDir"/>
	                <jvmarg value="-Dbuild.root=${build.root}"/>
	                <jvmarg value="-Dtools=${tools}"/>
	                <jvmarg value="-Dresult=${result}"/>
	                <jvmarg value="-Dpublish=${publish}"/>
	                <jvmarg value="-Dworkspace=${workspace}"/>
	                <jvmarg value="-Dtimestamp=${timestamp}"/>
	                <jvmarg value="-Dsite.pack200=${site.pack200}"/>
	                <jvmarg value="-Dqualifier.replacement.*=${qualifier.replacement.*}"/>
	                <jvmarg value="-DCapellaVersion=${CapellaVersion}"/>
	                <jvmarg value="-DhudsonJob=${hudsonJob}"/>
	                <jvmarg value="-Dsite_Kitalpha=${site_Kitalpha}"/>
	                <jvmarg value="-Dsite_EGF=${site_EGF}"/>
	                <jvmarg value="-DbuildVersion=${buildVersion}"/>
                    <arg value="-data" />
                    <arg value="@{workspace}" />
                <args />
            </java>
        </sequential>
    </macrodef>
    <target name="install.director">
        <available file="${tools}/director/director" property="director.exists" />
        <antcall target="do.install.director" />
    </target>
    
    <target name="do.install.director" unless="director.exists">
        <echo message="Fetching headless director application" />
        <tempfile destdir="${java.io.tmpdir}" prefix="director-" suffix=".zip" property="director.zip" deleteonexit="true" />
        <get src="${director.url}" dest="${director.zip}" />
        <mkdir dir="${tools}" />
        <unzip src="${director.zip}" dest="${tools}" />
        <delete file="${director.zip}" />
    </target>
    <target name="install.buckminster">
        <available file="${tools}/buckminster/buckminster" property="buckminster.exists" />
        <antcall target="do.install.buckminster" />
	</target>
	
    <target name="do.install.buckminster" unless="buckminster.exists" depends="install.director">
        <echo message="Configuring headless buckminster with needed features" />
        <echo message="Headless site: ${bm.headless.site}" />
        <echo message="External site: ${bm.external.site}" />
        <eclipse.launch app="director">
            <args>
                <jvmarg value="-Declipse.p2.mirrors=false" />
                <arg value="-r" />
                <arg value="${bm.headless.site}" />
                <arg value="-d" />
                <arg value="${tools}/buckminster" />
                <arg value="-p" />
                <arg value="Buckminster" />
                <arg value="-i" />
                <arg value="org.eclipse.buckminster.cmdline.product" />
                <arg value="-i" />
                <arg value="org.eclipse.buckminster.core.headless.feature.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.buckminster.pde.headless.feature.feature.group" />
            </args>
        </eclipse.launch>
    </target>
        <target name="install.egf">
        <available file="${tools}/egf/eclipse.ini" property="egf.exists" />
        <antcall target="do.install.egf" />
	</target>

	<target name="do.install.egf" unless="egf.exists" depends="install.director">
        <echo message="Configuring EGF with needed features" />
        <echo message="EGF site: ${egf.site}" />
        <echo message="EGF eclipse site: ${egf.eclipse.site}" />
        <eclipse.launch app="director">
            <args>
                <jvmarg value="-Declipse.p2.mirrors=false" />
                <arg value="-r" />
                <arg value="${egf.site}" />
                <arg value="-r" />
                <arg value="${egf.eclipse.site}" />
                <arg value="-d" />
                <arg value="${tools}/egf" />
                <arg value="-p" />
                <arg value="EGF" />
                <arg value="-i" />
                <arg value="org.eclipse.platform.ide" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.portfolio.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.portfolio.emf.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.portfolio.genchain.feature.group" />
            </args>
        </eclipse.launch>
    </target>
    <macrodef name="buckminster">
        <attribute name="command" />
        <element name="globargs" optional="true" />
        <element name="cmdargs" optional="true" />
        <sequential>
            <eclipse.launch app="buckminster">
                <args>
                    <jvmarg value="-Dbugfix.288796=true"/>
                    <arg value="--loglevel" />
                    <arg value="${buckminster.loglevel}" />
                    <arg value="--displaystacktrace" />
                    <globargs />
                    <arg value="@{command}" />
                    <arg value="-P" />
                    <arg value="${properties.tmp}" />
                    <cmdargs />
                </args>
            </eclipse.launch>
        </sequential>
    </macrodef>
	<macrodef name="egf">
        <element name="activities" />
        <element name="globargs" optional="true" />
        <element name="cmdargs" optional="true" />
        <sequential>
            <eclipse.launch app="egf">
                <args>
                    <arg value="-application" />
                    <arg value="org.eclipse.egf.application.activity" />
                    <arg value="-consoleLog" />
                    <globargs />
                    <arg value="-activities" />
                    <activities />
                    <cmdargs />
                </args>
            </eclipse.launch>
        </sequential>
    </macrodef>
	<macrodef name="anteclipse">
        <attribute name="buildfile" default="${relengDir}/build.xml" />
        <attribute name="target" />
        <element name="globargs" optional="true" />
        <sequential>
            <eclipse.launch app="egf">
                <args>
					<arg value="-application" />
					<arg value="org.eclipse.ant.core.antRunner" />
					<arg value="-consoleLog" />
                    <globargs />
					<arg value="-buildfile" />
					<arg value="@{buildfile}" />
					<arg value="@{target}" />
                </args>
            </eclipse.launch>
        </sequential>
    </macrodef>
    <target name="clean.result">
        <delete dir="${result}" failonerror="true" quiet="true" />
    </target>

    <target name="clean.workspace">
        <delete dir="${workspace}" failonerror="true" quiet="true" />
    </target>

    <target name="clean.tools">
        <delete dir="${tools}" failonerror="true" quiet="true" />
    </target>

    <target name="clean.all">
		<antcall target="clean.workspace" />
		<antcall target="clean.result" />
		<antcall target="clean.tools" />
    </target>
	<target name="init" depends="init.build.properties" >
		<echo message="Available variables are : "/>
		<echo message="Builtin $${relengDir} : ${relengDir}" />
		<echo message="Builtin $${build.root} : ${build.root}" />
		<echo message="Builtin $${tools} : ${tools}" />
		<echo message="Builtin $${result} : ${result}" />
		<echo message="Builtin $${publish} : ${publish}" />
		<echo message="Builtin $${workspace} : ${workspace}" />
		<echo message="Builtin $${timestamp} : ${timestamp}" />
		<echo message="Provided $${site.pack200} : ${site.pack200}" />
		<echo message="Provided $${qualifier.replacement.*} : ${qualifier.replacement.*}" />
		<echo message="Provided $${CapellaVersion} : ${CapellaVersion}" />
		<echo message="Provided $${hudsonJob} : ${hudsonJob}" />
		<echo message="Provided $${site_Kitalpha} : ${site_Kitalpha}" />
		<echo message="Provided $${site_EGF} : ${site_EGF}" />
		<echo message="Provided $${buildVersion} : ${buildVersion}" />
	</target>

    <target name="init.build.properties">
        <!-- Echo relevant properties to a temporary file so that Buckminster can read them -->
        <tempfile destdir="${java.io.tmpdir}" prefix="build-" suffix=".properties" deleteonexit="true" property="properties.tmp" />
        <echoproperties destfile="${properties.tmp}">
            <!-- We don't want these. basedir in particular will cause problems if passed explicitly -->
            <propertyset negate="true">
                <propertyref name="basedir" />
                <propertyref name="eclipse.home" />
                <propertyref name="properties.tmp" />
                <propertyref name="line.separator" />
                <propertyref name="path.separator" />
                <propertyref prefix="ant." />
                <propertyref prefix="file." />
                <propertyref prefix="java." />
                <propertyref prefix="sun." />
                <propertyref prefix="user." />
            </propertyset>
        </echoproperties>
    </target>
	
	<target name="all" depends="Clean_Result,delete_TP,Download_CapellaTP,Import_All_XMLPivot_Plugins,PublishStep_5,del-feature-suffix-publish-dir-name,del-feature-suffix-dropins-dir-name,Archive_addon_UpdSiteSrc,clean-unused-gen-src-artifacts,Archive_addon_DropinsSrc,clean-p2-container" />
	<target name="Clean_Result" >
		<antcall target="clean.result" />
	</target>
    <target name="Import_All_XMLPivot_Plugins" depends="init,install.buckminster">
        <echo message="Importing projects into workspace ${workspace} and binaries into target platform" />

		<echo message="install JRE ${env.JAVA_HOME}" />
    	<buckminster command="installJRE">
            <cmdargs>
                <arg value="--location" />
                <arg value="${env.JAVA_HOME}" />
            </cmdargs>
        </buckminster>


		<echo message="import target platform" />
        <buckminster command="importtargetdefinition">
            <cmdargs>
                <arg value="--active" />
                <arg value="${relengDir}/buckminster_Import_All_XMLPivot_Plugins/build.target" />
            </cmdargs>
        </buckminster>
		<echo message="provision : import projects in workspace" />
        <buckminster command="import">
            <!-- Uncomment to debug <globargs><jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"/></globargs> -->
            <cmdargs>
                <arg value="${relengDir}/buckminster_Import_All_XMLPivot_Plugins/build.mspec" />
            </cmdargs>
        </buckminster>


        <echo message="Invoking all eclipse builders on workspace ${workspace}" />
        <buckminster command="build" >
            <cmdargs>
                <arg value="--clean" />
                <arg value="--thorough" />
            </cmdargs>
		</buckminster>
    </target>

       <target name="PublishStep_5" depends="init,install.buckminster" >

             
             <echo message="Generate Site"/>
             <buckminster command="perform">
                    <globargs>
                          <arg value="-Dsite.include.top=true"/>
                          <arg value="-Dsite.signing=false"/>                      
                          <arg value="-Dcbi.include.source=true"/>                      
                    </globargs>
                    <cmdargs>
                          <arg value="org.polarsys.capella.xmlpivot.feature:eclipse.feature#site.p2" />
                    </cmdargs>
             </buckminster>

             <echo message="Publish site"/>
             <mkdir dir="${publish}/org.polarsys.capella.xmlpivot.feature/site.p2/"/>
             <copy todir="${publish}/org.polarsys.capella.xmlpivot.feature/site.p2/">
                    <fileset dir="${result}/output">
                          <include name="org.polarsys.capella.xmlpivot.feature*/site.p2/*"/>
                          <include name="org.polarsys.capella.xmlpivot.feature*/site.p2/**"/>
                    </fileset>
                    <filtermapper>
                          <replaceregex pattern=".*site\.p2" replace="" />
                    </filtermapper>
             </copy>

             <echo message="Publish dropins"/>
             <condition property="site.src" value="site.signed" else="site">
                    <istrue value="${site.signing}" />
             </condition>

             <copy todir="${publish}/org.polarsys.capella.xmlpivot.feature/dropins/org.polarsys.capella.xmlpivot.feature/eclipse/">
                    <fileset dir="${result}/output">
                          <include name="org.polarsys.capella.xmlpivot.feature*/${site.src}/plugins/*.jar"/>
                          <include name="org.polarsys.capella.xmlpivot.feature*/${site.src}/features/*.jar"/>
                    </fileset>
                    <filtermapper>
                          <replaceregex pattern=".*_.*-eclipse\.feature.${site.src}.plugins" replace="plugins" />
                          <replaceregex pattern=".*_.*-eclipse\.feature.${site.src}.features" replace="features" />
                    </filtermapper>
             </copy>

             <buckminster command="perform">
                    <globargs>
                          <arg value="-DsiteDir=${publish}/org.polarsys.capella.xmlpivot.feature/dropins/org.polarsys.capella.xmlpivot.feature/eclipse/" />
                    </globargs>
                    <cmdargs>                    
                          <arg value="Import_All_XMLPivot_Plugins:buckminster#convertSiteToRuntime" />
                    </cmdargs>
             </buckminster>
             
             <pathconvert property="featurefilePublishStep_5">
                    <first count="1">
                          <fileset dir="${result}/output" includes="org.polarsys.capella.xmlpivot.feature*eclipse.feature/temp/manifest/feature.xml" />
                    </first>
             </pathconvert>
             <loadfile property="featureversionPublishStep_5" srcFile="${featurefilePublishStep_5}">
                    <filterchain>
                          <striplinebreaks/>
                          <replaceregex
                                 pattern="^.*&lt;feature[^&gt;]*version=&quot;([^&quot;]*)&quot;.*$"
                                 replace="\1"/>
                    </filterchain>
             </loadfile>

             <touch file="${publish}/org.polarsys.capella.xmlpivot.feature/dropins/org.polarsys.capella.xmlpivot.feature/org.polarsys.capella.xmlpivot.feature_version_${featureversionPublishStep_5}" />        
       </target>
	<target name="Download_CapellaTP">
		<antcall target="DownloadCapellaTP"/>
	</target>

<target name="DownloadCapellaTP">
	 <dirname property="dir" file="${publish}/XMLPivot.ts"/>
	 <mkdir dir="${dir}" />

	<get 
		src="${hudsonJob}/buildTimestamp?format=yyyy-MM-dd_HH-mm-ss" 
		dest="${publish}/XMLPivot.ts"/>
	
	<loadfile srcfile="${publish}/XMLPivot.ts" property="ts"/>
	<echo>${publish}/XMLPivot timestamp: ${ts}</echo>

	<get 
		src="${hudsonJob}/artifact/result/publish/capella-${CapellaVersion}.${ts}-linux-gtk-x86_64-mars.tar.gz" 
		dest="${publish}/XMLPivot.tar.gz"/>	

	<gunzip src="${publish}/XMLPivot.tar.gz"/>
	<untar src="${publish}/XMLPivot.tar" dest="${publish}/XMLPivot"/>
</target>


	<target name="clean-p2-container">
		<antcall target="clean-p2-container-dir"/>
	</target>

<target name="clean-p2-container-dir">
	<delete includeemptydirs="true">
   	 	<fileset dir="${publish}/XMLPivot">
        		<include name="*/"/>
    			<exclude name="site.p2/"/>
    		</fileset>
	</delete>
</target>

	<target name="delete_TP" depends="init">
		<delete dir="${publish}/XMLPivot" >

		</delete>
	</target>

	<target name="clean-unused-gen-src-artifacts" depends="init">
		<delete  >
			<fileset file="${publish}/XMLPivot/dropins/XMLPivot/org.polarsys.*"/>
		</delete>
	</target>

	<target name="del-feature-suffix-publish-dir-name" depends="init">
		<move file="${publish}/org.polarsys.capella.xmlpivot.feature" tofile="${publish}/XMLPivot"  >
		</move>
	</target>

	<target name="del-feature-suffix-dropins-dir-name" depends="init">
		<move file="${publish}/XMLPivot/dropins/org.polarsys.capella.xmlpivot.feature" tofile="${publish}/XMLPivot/dropins/XMLPivot"  >
		</move>
	</target>

	<target name="Archive_addon_UpdSiteSrc" depends="init">
		<zip destfile="${publish}/XMLPivot-updateSite-${buildVersion}.zip" basedir="${publish}/XMLPivot/site.p2"  >

		</zip>
	</target>

	<target name="Archive_addon_DropinsSrc" depends="init">
		<zip destfile="${publish}/XMLPivot-dropins-${buildVersion}.zip" basedir="${publish}/XMLPivot/dropins/"  >

		</zip>
	</target>

</project>